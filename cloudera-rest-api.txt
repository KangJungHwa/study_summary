#################################################################################
	 2대의 클러스터의 환경설정을 비교해서 클러스터의 문제점 파악하는법
	 api_dump.py를 이용해서 클러스터의 모든 config 파일을 백업받는다.
	 api_dump.py는 cm_api를 이용하기 때문에 cm_api 패키지가 필요하다.
	 tar xvfz cm_api-15.0.0.tar.gz -C /tmp/
	 api_dump.py를 아래경로 밑에 카피해놓고 실행해야 한다.
	 /tmp/cm_api-12.0.0/src/
	 python api-dump.py -s <CM URL> -n <cluster_name> -p <패스워드> -o /tmp/dump
	 dump 받은 클러스터의 환경설정을 아래 cluster-compare.py를 이용해서 비교한다.
	 디렉토리를 지정하면 지정된 디렉토리의 모든 환경설정파일을 비교한다.
	 python cluster-compare.py /tmp/dump /tmp/api_dump
#################################################################################

#################################################################################
# api_dump.py 
python api-dump.py -s <CM URL> -n <cluster_name> -p <패스워드> -o /tmp/dump
#################################################################################

#!/usr/bin/env python
#coding:utf8
#cm_api.py 

import re, math, pprint, json, sys, argparse, os, ConfigParser, shutil,time
from cm_api.api_client import ApiResource
from subprocess import call

t = time.localtime()
timestamp = time.strftime('%b-%d-%Y_%H:%M', t)
debug = False
def buildParser(inputArgs):
    parser = argparse.ArgumentParser(
        description='Cloudera Manager Configuration APIs')

    parser.add_argument('-s', '--src', dest='cmHost', help='Source CM hostname')
    parser.add_argument('-P', '--port', dest='cmPort', default=7183, type=int, help='CM Port')
    parser.add_argument('-n', '--name', dest='clusterName',default='xxxxx', help='Source Cluster Name')
    parser.add_argument('-u', '--user', dest='user', default='admin', help='CM User')
    parser.add_argument('-p', '--pass', dest='password', help='CM Password')
    parser.add_argument('-v', dest='verbose', action='store_true', default=False,
                        help='Enable verbose logging')
    parser.add_argument('-o', '--output-directory', dest='outputDirname',
                        help='Dump the configuration to the specified local directory')
    return parser.parse_args(inputArgs)

def pickCluster(cList):
    # Print all cluster names and allow user to choose
    for i in xrange(len(cList)):
        print str(i) + " : " + cList[i].name + " / " + cList[i].fullVersion
    while True:
        try:
            cNum = int(raw_input("Pick the cluster number from above: "))
        except ValueError:
            print "Please provide a valid number from above"
            continue
        if cNum not in range(len(cList)):
            print "Please provide a valid number from above"
            continue
        else:
            if debug:
                print "Chosen cluster: " + cList[cNum].name
                print "Cluster version: " + cList[cNum].version
            return cList[cNum]

# Get all services for cluster
def getServices(cluster):
    """
    Gets an array of the configured services
    This assumes only 1 type of service per cluster.
    :param cluster
    :return: array of service datatypes
    Datastructure: service.name / .type
    If multiple services exists, add logic to copy a particular services to particular destination service
    """
    services = []
    for s in cluster.get_all_services():
        if debug:
            print s
        services.append(s)
    return services

def dumpConfig(cluster, dname):
    """
    :param cList: cluster list
    :param dname: output dirname
    This will dump the clusters configuration to a file per service.
    This is mainly used as a backup for cluster configuration.
    """
    services = getServices(cluster)
    # Iterate over services and print to file
    for s in services:
        out_conf = ConfigParser.RawConfigParser()
        out_conf.add_section(s.type)
        sConf = s.get_config(view='full')[0]
        if debug:
            print s.name
            pprint.pprint(sConf)
        for name, config in sConf.items():
            out_conf.set( s.type, config.name, config.value.encode('ascii','ignore').decode('ascii') if config.value else config.default )
        fname = "%s/%s.conf" % (dname,s.type.lower())
        with open(fname, "w") as out_file:
            out_conf.write(out_file)

        for group in s.get_all_role_config_groups():
            if debug:
                print "roleConfigGroup: " + group.name
            out_conf = ConfigParser.RawConfigParser()
            out_conf.add_section( group.roleType )
            gConf = group.get_config(view='full')
            for name, config in gConf.items():
                out_conf.set( group.roleType, config.name, config.value if config.value else config.default )
            fname = "%s/%s-%s.conf" % (dname,s.type.lower(), group.roleType.lower())
            with open(fname, "w") as out_file:
                out_conf.write(out_file)


if __name__ == "__main__":
    args = buildParser(sys.argv[1:])

    if args.verbose:
        debug = True

    if (args.cmHost is None):
        print "Must provide source hostnames for CM"
        exit(1)

    if (args.outputDirname is None):
        print "Must provide output directory"
        exit(2)

    if os.path.isdir( args.outputDirname ):
        print "Output directory already exists with configurations, will taking a backup of the directory which can be used for rolling back a config"
    else:
       os.mkdir( args.outputDirname)

    print "HELLO"
    print "host " + args.cmHost
    print "port " + str(args.cmPort)
    print "user " + args.user
    print "password " + args.password
    print "cluster " + args.clusterName

    sapi = ApiResource(args.cmHost, args.cmPort, args.user, args.password,use_tls=1)

    if (args.clusterName is None):
        # Get all cluster names
        sClusters = []
        for c in sapi.get_all_clusters():
            print c
            sClusters.append(c)

        # Choose source and destination clusters
        print "Source cluster: " + args.cmHost
        sCluster = pickCluster(sClusters)
    else:
        sCluster = sapi.get_cluster(args.clusterName)

    sName = args.outputDirname
    shutil.move(sName, sName +timestamp)
    os.mkdir(sName)
    dumpConfig(sCluster, sName)
    if os.path.exists(sName +"_edits"):
        shutil.move(sName +"_edits", sName+ "_edits" +timestamp)
        os.mkdir(sName +"_edits")
    else:
        shutil.copytree(sName, sName + "_edits")
		
#################################################################################
# cluster-compare.py 
  python cluster-compare.py /tmp/dump /tmp/api_dump
  python cluster-compare.py <환경설정 디렉토리1> <환경설정 디렉토리2>
#################################################################################
#!/usr/bin/python
# -*- coding: UTF-8 -*-
# Cluster-Compare script, adapted from a standard script to iterate through files. Modified
# to use difflib HTMl and generate a report to compare cluster configurations


import filecmp
import os
import os.path
import sys
import difflib
import subprocess
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def diff(basepath, path1, path2):
    # STEP 1: iterate on all path1 paths (directories and filenames) and compare with path2
    # - report if path2 does not exist
    # - when path is a file, report if path1 differ from path2
    common_paths = []
    FILE='ccreport.html'
    if os.path.isfile(FILE) and os.access(FILE, os.R_OK):
       os.remove('ccreport.html')

    for path in os.listdir(path1):
        abs1 = os.path.join(path1, path)
        abs2 = os.path.join(path2, path)
        relative = abs1[len(basepath)+1:]
        if not os.path.exists(abs2):
             print "Only in %s: %s" % (os.path.dirname(abs1), path)
             continue
        common_paths.append(relative)
        if os.path.isfile(abs1):
            r = filecmp.cmp(abs1, abs2)
            if not r:
                #print "Files %s and %s differ" % (abs1, abs2)
                read1=open(abs1, 'U').readlines()
                read2=open(abs2, 'U').readlines()
                with open ('ccreport.html' ,'a') as f:
                        diff=difflib.HtmlDiff(tabsize=0.5).make_file(read1,read2,abs1,abs2,context="true")
                        f.writelines(diff)
        elif os.path.isdir(abs1):
            paths = diff(basepath, abs1, abs2)
            common_paths.extend(paths)

    # STEP 2: the other way: iterate on all path2 paths and
    # - report if path in path2 does not exist in path1
    for path in os.listdir(path2):
        abs1 = os.path.join(path1, path)
        abs2 = os.path.join(path2, path)
        relative = abs2[len(basepath)+1:]
        if not os.path.exists(abs1):
            print "Only in %s: %s" % (os.path.dirname(abs2), path)

    return common_paths
def email_send ():
        FILE='ccreport.html'
        email="jk83860@imcap.ap.ssmb.com"
        me="jk83860@imcap.ap.ssmb.com"
        msg = MIMEMultipart()
        msg['Subject'] = 'Cluster Comparison Report'
        msg['From']=me
        msg['To'] = email
        msg.preamble = 'Please find attached HTML report for Cluster comparison'
        f=file(FILE)
        attachment = MIMEText(f.read(),_subtype='html')
        attachment.add_header('Content-Disposition','attachment',filename="ccreport.html",FILE=FILE)
        msg.attach(attachment)
        s = smtplib.SMTP('localhost')
        s.sendmail(me,email, msg.as_string())
        s.quit()
if __name__ == "__main__":
    print len(sys.argv)
    if len(sys.argv) != 3:
        print "Usage: cluster-compare.py {path1} {path2} {email}"
        sys.exit()

    paths = sys.argv[1:]
    for path in paths:
        if not os.path.exists(path):
            print "%s does not exist!" % path
            sys.exit()
    basepath = os.path.commonprefix(paths).rstrip('/')

    diff(basepath, *paths)
    email_send()
	
	
#################################################################################
load-config.py 사용방법
update configuration

load-config.py –s <cmhost> -P <port> -u <username> -p <password> --original-directory <path-to-original-dir> 
--edits-directory <path-to-edits-dir> --filename <file> 
load-config.py –s <서버명> –P 7183 –u admin –p admin --original-directory config --edits-directory config_edits –f hdfs


명령어 수행후 configuration을 변경하겠냐는 질문이 나오면 y를 입력해 준다.

Do you want to commit these changes y/n? n
Please make the changes again and run the update again

Answering “y” will commit the change and deploy the client configuration along with restarting the service:

Do you want to commit these changes y/n? y
Deploying client configuration.....
Deployed client config
Restarting serivce...
Service successfully restarted



#################################################################################
#!/usr/bin/env python
# encoding: utf-8

import re, math, pprint, json, sys, argparse, os, ConfigParser, shutil
import difflib
from cm_api.api_client import ApiResource
from subprocess import call

# Assumes there is 1 type of service per cluster, i.e. 1 hive service on each cluster.
# Assumes there is at most 1 role group per role type in all services
CMD_TIMEOUT=180
debug = False
def buildParser(inputArgs):
    parser = argparse.ArgumentParser(
        description='Cloudera Manager Configuration APIs')
    parser.add_argument('-s', '--src', dest='cmHost', help='Source CM hostname')
    parser.add_argument('-P', '--port', dest='cmPort', default=7180, type=int, help='CM Port')
    parser.add_argument('-n', '--name', dest='clusterName', help='Source Cluster Name')
    parser.add_argument('-u', '--user', dest='user', default='admin', help='CM User')
    parser.add_argument('-p', '--pass', dest='password', default='admin', help='CM Password')
    parser.add_argument('-v', dest='verbose', action='store_true', default=False,
                        help='Enable verbose logging')
    parser.add_argument('--original-directory', dest='original_path',
                        help='Path to original output-directory')
    parser.add_argument('--edits-directory', dest='edits_path', help='Path to edits-directory')
    parser.add_argument('--filename', dest='filename', help='Filename to diff and update')
    return parser.parse_args(inputArgs)

def pickCluster(cList):
    # Print all cluster names and allow user to choose
    for i in xrange(len(cList)):
        print str(i) + " : " + cList[i].name + " / " + cList[i].fullVersion
    while True:
        try:
            cNum = int(raw_input("Pick the cluster number from above: "))
        except ValueError:
            print "Please provide a valid number from above"
            continue
        if cNum not in range(len(cList)):
            print "Please provide a valid number from above"
            continue
        else:
            if debug:
                print "Chosen cluster: " + cList[cNum].name
                print "Cluster version: " + cList[cNum].version
            return cList[cNum]

# Get all services for cluster
def getServices(cluster):
    """
    Gets an array of the configured services
    This assumes only 1 type of service per cluster.
    :param cluster
    :return: array of service datatypes
    Datastructure: service.name / .type
    If multiple services exists, add logic to copy a particular services to particular destination service
    """
    services = []
    for s in cluster.get_all_services():
        if debug:
            print s
        services.append(s)
    return services

def getIemToUpdate(cluster, service_role):
    dash_idx = service_role.find("-")
    if dash_idx == -1: # purely a service
        update_item = ("service", service_role)
    else: # service-role combo
        update_item = ("role", service_role[:dash_idx], service_role[dash_idx+1:])

    (service,role) = (None, None)
    for s in cluster.get_all_services():
        if s.type.lower() == update_item[1]:
            service = s
            break

    if update_item[0] == "service":
        return (service,role)

    for group in service.get_all_role_config_groups():
        if group.roleType.lower() == update_item[2]:
            return (service, group)

    raise Exception("Unable to find service/role in cluster")

def diff_load(cluster, service_role, original, edits):
    (service, role) = getIemToUpdate(cluster, service_role)

    edits_conf = ConfigParser.RawConfigParser()
    edits_conf.read(edits + "/" + service_role + ".conf")
    edits_dict = dict(edits_conf.items(edits_conf.sections()[0]))

    orig_conf = ConfigParser.RawConfigParser()
    orig_conf.read(original + "/" + service_role + ".conf")
    orig_dict = dict( orig_conf.items(orig_conf.sections()[0]) )

    print "The following changes have been made\n"
    diff_keys = []
    for k in set(orig_dict.keys())| set(edits_dict.keys()):
        if orig_dict[k] != edits_dict[k]:
            print "Key: %s, Original: [%s], Edit: [%s]" % (k, orig_dict[k], edits_dict[k])
            diff_keys.append(k)

    change=raw_input("Do you want to commit these changes y/n? ")
    if change != "y":
        print "Please make the changes again and run the update again"
        return

    update_item = role if role else service
    for k in diff_keys:
        v = edits_dict[k]
        if v not in "None":
            update_item.update_config({k: v})

    print "Deploying client configuration....."
    cmd = cluster.deploy_client_config()
    if not cmd.wait(CMD_TIMEOUT).success:
        print "Failed to deploy client configs"
    else:
        print "Deployed client config"
        print "Restarting serivce..."
        cmd = service.restart()
        if not cmd.wait(CMD_TIMEOUT).success:
            print "Failed to start service"
        else:
            print "Service successfully restarted"

if __name__ == "__main__":
    args = buildParser(sys.argv[1:])
    if args.verbose:
        debug = True

    if (args.cmHost is None):
        print "Must provide source hostnames for CM"
        exit(1)

    if args.original_path is None or args.edits_path is None:
        print "Must provide both original and edits directories"
        exit(2)

    if not os.path.isdir( args.original_path ) or not os.path.isdir( args.edits_path ):
        print "Both directories must exist"
        exit(3)

    sapi = ApiResource(args.cmHost, args.cmPort, args.user, args.password,use_tls=0)

    if (args.clusterName is None):
        # Get all cluster names
        sClusters = []
        for c in sapi.get_all_clusters():
            sClusters.append(c)

        # Choose source and destination clusters
        print "Source cluster: " + args.cmHost
        sCluster = pickCluster(sClusters)
    else:
        sCluster = sapi.get_cluster(args.cmHost)

    sName = args.filename
    diff_load(sCluster, sName, args.original_path, args.edits_path)
###################################################################################################
CLOUDERA REST API의 사용
<cluster name>은 대소문자를 구분한다.
패스워드 정보가 암호화 되어 나오지 않기때문에 패스워드 확인목적으로 사용하기 편리하다.
###################################################################################################
클러스터 정보 가져오기
===============================
curl -u admin:Cmpassdev1 -k https://<CM_SERVER_HOSTNAME>:7183/api/v9/clusters
{
  "items" : [ {
    "name" : "KRBDDEV",
    "displayName" : "KRBDDEV",
    "version" : "CDH5",
    "fullVersion" : "5.9.1",
    "maintenanceMode" : false,
    "maintenanceOwners" : [ ]
  } ]
  
클러스터 서비스 정보 가져오기  
================================
curl -u admin:Cmpassdev1 -k https://<CM_SERVER_HOSTNAME>:7183/api/v9/clusters/KRBDDEV/services

{
  "items" : [ {
    "name" : "zookeeper",
    "type" : "ZOOKEEPER",
    "clusterRef" : {
      "clusterName" : "KRBDDEV"
    },
    "serviceUrl" : "https://<CM_SERVER_HOSTNAME>:7183/cmf/serviceRedirect/zookeeper",
    "serviceState" : "STARTED",
    "healthSummary" : "GOOD",
    "healthChecks" : [ {
      "name" : "ZOOKEEPER_CANARY_HEALTH",
      "summary" : "GOOD"
    }, {
      "name" : "ZOOKEEPER_SERVERS_HEALTHY",
      "summary" : "GOOD"
    } ],
    "configStalenessStatus" : "FRESH",
    "clientConfigStalenessStatus" : "FRESH",
    "maintenanceMode" : false,
    "maintenanceOwners" : [ ],
    "displayName" : "zookeeper"
  }, {
    "name" : "spark2_on_yarn",
    "type" : "SPARK2_ON_YARN",
    "clusterRef" : {
      "clusterName" : "KRBDDEV"
    },
    "serviceUrl" : "https://<CM_SERVER_HOSTNAME>:7183/cmf/serviceRedirect/spark2_on_yarn",
    "serviceState" : "STARTED",
    "healthSummary" : "GOOD",
    "healthChecks" : [ ],
    "configStalenessStatus" : "FRESH",
    "clientConfigStalenessStatus" : "FRESH",
    "maintenanceMode" : false,
    "maintenanceOwners" : [ ],
    "displayName" : "Spark 2"
  } ]
}
클러스터 환경설정 가져오기  
================================
curl -u admin:Cmpassdev1 -k https://<CM_SERVER_HOSTNAME>:7183/api/v9/clusters/KRBDDEV/services/hdfs/config


